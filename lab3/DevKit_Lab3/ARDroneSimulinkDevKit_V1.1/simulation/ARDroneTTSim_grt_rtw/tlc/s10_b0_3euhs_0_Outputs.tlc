%implements s10_b0_3euhs_0_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

boolean_T rEQ0;
real_T q;
%closefile localVarDecl
/* MATLAB Function 'ARDrone Simulation Block/normalize angle  between -pi and pi radians': '<S6>:1' */
/* '<S6>:1:4' */
if (rtIsNaN(rtu_angleIn) || rtIsInf(rtu_angleIn)) {
    localB->angleOut = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
} else if (rtu_angleIn == 0.0) {
    localB->angleOut = 0.0;
} else {
    localB->angleOut = fmod(rtu_angleIn, 6.2831853071795862);
    rEQ0 = (localB->angleOut == 0.0);
    if (!rEQ0) {
        q = fabs(rtu_angleIn / 6.2831853071795862);
        rEQ0 = (fabs(q - floor(q + 0.5)) <= 2.2204460492503131E-16 * q);
    }
    if (rEQ0) {
        localB->angleOut = 0.0;
    } else {
        if (rtu_angleIn < 0.0) {
            localB->angleOut += 6.2831853071795862;
        }
    }
}
if (localB->angleOut > 3.1415926535897931) {
    /* '<S6>:1:5' */
    /* '<S6>:1:6' */
    localB->angleOut += -6.2831853071795862;
}
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[0].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Output", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))
%<SLibCG_AccessArg(0, 0, 0)>
%endif
%if SLibCG_ArgAccessed(0, 0, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Output", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(0, 0, 0)>
%endif
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void normalizeanglebetweenpiandp(\
%assign comma = ""
%if SLibCG_ArgAccessed(0, 0, 0)
%<comma>%<::tSimStructType> * const %<::tSimStruct>\
%assign comma = ", "
%endif
%<comma>real_T rtu_angleIn\
%assign comma = ", "
%<comma>B_normalizeanglebetweenpiandp_T *localB\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 0, fcnProtoType)>
%endfunction
